{"version":3,"file":"slarn-autocomplete-ca.js","sources":["ng://slarn-autocomplete-ca/lib/autocomplete/slarn-autocomplete.service.ts","ng://slarn-autocomplete-ca/lib/autocomplete/translation.ts","ng://slarn-autocomplete-ca/lib/autocomplete/slarn-autocomplete.component.ts","ng://slarn-autocomplete-ca/lib/autocomplete/auto-grow.directive.ts","ng://slarn-autocomplete-ca/lib/autocomplete/focus.directive.ts","ng://slarn-autocomplete-ca/lib/autocomplete/render-safely.pipe.ts","ng://slarn-autocomplete-ca/lib/slarn-autocomplete.module.ts","ng://slarn-autocomplete-ca/public-api.ts","ng://slarn-autocomplete-ca/slarn-autocomplete-ca.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ACService {\n\n    constructor(\n        private _http: HttpClient\n    ) { }\n\n    search(word: string, url: string): Observable<any>{\n        let _url = new URL(url);\n        _url.searchParams.append('ac-reg', word);\n        return this._http.get(_url.toString());\n    }\n}\n","/**\n * Enum class contains the available languages\n */\nexport enum ACTranslator{\n  EN = 'en',\n  FR = 'fr',\n  AR = 'ar',\n}\n\n/**\n * Configuration of the translator\n */\nexport const translator: any = {\n  // available languages\n  availableLanguages: [ACTranslator.EN, ACTranslator.FR, ACTranslator.AR],\n\n  // translation book\n  dictionary: {\n    loadingText: {\n      'en': 'Loading data...',\n      'fr': 'Chargement des données...',\n      'ar': 'تحميل البيانات...'\n    },\n    noMatchFoundText: {\n      'en': 'No match found!',\n      'fr': 'Pas de résultat trouvé!',\n      'ar': 'لا يوجد تطابق!'\n    },\n    errors:{\n      passingArrayValueWithNoMultipleOption: {\n        'en': 'You have passed an array value to be selected\\n either change the value or set the \"multiple\" option to true in the configuration.',\n        'fr': 'Vous avez passé une valeur de tableau à sélectionner\\n modifier la valeur ou changer l\\'option \"multiple\" à true dans la configuration.',\n        'ar': 'لقد قمت بتمرير قيمة جدول لاختيارها, عليك بتغير القمة أو تغير الخيار \"multiple\" إلى \"true\".'\n      },\n      unknownType: {\n        'en': 'The type of \"selectedId\" must be number, string or Array of numbers or strings!',\n        'fr': 'Le type de \"selectedId\" doit être number, string ou tableau de numbers ou strings',\n        'ar': 'نوع المتغير \"selectedId\" يجب أن يكون numbers، strings أو مصفوفة numbers أو strings',\n      },\n      unknownLanguage: {\n        'en': 'Unknown language \":1\"!\\n Please make sure to select one of the available languages \":2\".',\n        'fr': 'Langue inconnue \":1\"\\n Assurez-vous de sélectionner l\\'une des langues disponibles \":2\".',\n        'ar': 'اللغة المختارة \":1\" غير معروفة، الرجاء إختيار واحدة من الغات المتوفرة \":2\".'\n      },\n      unknownFieldForGroupOption:{\n        'en': 'You have added the option \"group\" to the autocomplete but forgot to specify the \"field\"!',\n        'fr': 'Vous avez ajouté l\\'option \"group\" mais vous avez oublié l\\'option \"field\"!',\n        'ar': 'لقد قمت بإضافة الخيار \"group\" لكن لم تحدد الخيار \"field\"!',\n      },\n      unknownKeyValue: {\n        'en': 'Can\\'t find the key \":1\" in the object \":2\"!',\n        'fr': 'On ne peux pas trouvé le clé \":1\" dans l\\'object \":2\"!',\n        'ar': 'لم نتمكن من إيجاد المتغير \":1\" في المكون \":2\"!',\n      },\n      duplicateItemDetected: {\n        'en': 'An item with the same \"key\" value already exist in the \"data\" array: \":1\"\\nUnable to append the item \":2\"',\n        'fr': 'An élément avec la même valeur de \"key\" existe dans le tableau \"data\": \":1\"\\nImpossible d\\'ajouter l\\'élément \":2\"',\n        'ar': 'يوجد عنصر بنفس قمة المتغير \"key\" في المصفوفة \"data\": \":1\"\\n لا يمكن إضافة العنصر: \":2\"',\n      },\n      appendItemWorkOnlyLocally: {\n        'en': '\"appendItem()\" function is for local configuration only\\nIf you are using an API (remote configuration) and you add a new object to it then this new object will be available when you start typing in the autocomplete.\\'',\n        'fr': '\"appendItem()\" est une fonction pour la configuration locale\\nSi vous utilisez une API (configuration à distance) et vous ajoutez un nouveau objet donc ce dérnier sera disponible lorsque vous commencez à taper dans l\\'autocomplete.',\n        'ar': '\"appendItem()\" هي وظيفة تستعمل فقط في التكوين المحلي \"ACLocalConfoguration\"\\n إذا كنت تستعمل التكوين عن بعد \"ACRemoteConfiguration\" إذاً العنصر الجديد سيكون متاح حالما تشرع في الكتابة.',\n      }\n    }\n  }\n};\n\n/**\n * Add values to message dynamically and translate it\n * @param message\n * @param values\n * @returns\n */\nexport function dynamic_translation(message: string, values: Array<any>){\n  let counter = 1;\n  values.forEach(value => {\n    message = message.replace(':'+counter, value);\n    counter++;\n  });\n\n  return message;\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  AfterViewInit,\n  Output,\n  ViewChild,\n  forwardRef, ViewChildren, QueryList\n} from '@angular/core';\nimport {ACService} from './slarn-autocomplete.service';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {ACTranslator, dynamic_translation, translator} from \"./translation\";\n\n@Component({\n  selector: 'slarn-autocomplete',\n  templateUrl: './slarn-autocomplete.component.html',\n  styleUrls: ['./slarn-autocomplete.component.css'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SlarnAutocompleteComponent),\n    multi: true\n  }],\n  // encapsulation: ViewEncapsulation.Emulated,\n})\nexport class SlarnAutocompleteComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n  private _templateVariables: RegExpMatchArray;\n  private _selectedId: number | string | Array<number | string>;\n  _selectedItem: any | Array<SelectedItem>;\n\n  /**\n   * list contains code of keys that will trigger the search function\n   * and the keys that represent navigation action\n   * @link https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes\n   */\n  private _keys = {\n    searchTriggerKeys: [46, 222, 8, 32],\n    navigationKeys: [38, 40, 13]// up, down, enter\n  };\n  private propagateChange: any = null;\n  private typingTimer = null;\n  private doneTypingInterval = 250;\n  private _selectedIndexFromNavigation: number = -1;\n  // private _isLocalConfig: boolean;\n\n  displaySuggestions: boolean = false;\n  loadingData: boolean = false;\n  filteredItems: Array<any> = [];\n  groups: Array<string> = null;\n  filteredGroupedItems: any;\n  translator = translator;\n\n  @ViewChild('autocompleteInput') autocompleteInput: ElementRef;\n  @ViewChild('displayAllBtn') displayAllBtn: ElementRef;\n  @ViewChild('container') container: ElementRef;\n  @ViewChild('spanX') spanX: ElementRef;\n  @ViewChildren('acsuggestion') suggestions: QueryList<SlarnAutocompleteSuggestionComponent>;\n\n  @Input('configuration') configuration: any;\n  @Input('disabled') disabled: boolean;\n  @Input('unselectable') unselectable: Array<string | number> = [];\n  @Output('onItemSelected') onItemSelected: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _service: ACService) {\n    // require('style-loader!./../../themes/default.css');\n  }\n\n  @Input()\n  set selectedId(value: number | string | Array<number | string>) {\n    this.filterSelectedValue(value);\n    this.searchAndSelectItemFromKey();\n  }\n\n  /**\n   * Filter given value and make sure that the autocomplete gets the correct data\n   * to work as expected\n   * @param value\n   */\n  private filterSelectedValue(value) {\n    this._selectedId = value;\n    // after setting key value we search for the related item\n    if (this.configuration.multiple && !Array.isArray(value)) {\n      // console.log('multiple autocomplete and value not an array, converting _selectedId to array and push the value');\n      this._selectedId = [];\n      this._selectedId.push(value);\n    }\n\n    if (!this.configuration.multiple && Array.isArray(value))\n      throw new Error(this.translator.dictionary.errors.passingArrayValueWithNoMultipleOption[this.configuration.language]);\n\n    if ((Array.isArray(value) && this.arrayHasObject(value))\n      || (!Array.isArray(value) && typeof value === 'object'))\n      throw new Error(this.translator.dictionary.errors.unknownType[this.configuration.language]);\n  }\n\n  /**\n   * Check array contain one or many objects\n   * @param value\n   */\n  private arrayHasObject(value: Array<any>) {\n    let hasObject = false;\n    value.forEach(e => {\n      if (typeof e === 'object') hasObject = true;\n    });\n    return hasObject;\n  }\n\n  /**\n   * Return the selected key(s)\n   */\n  get selectedId(): number | string | Array<number | string> {\n    return this._selectedId;\n  }\n\n  /**\n   * Return the selected item(s)\n   */\n  get selectedData(): any {\n    return (Array.isArray(this._selectedItem)) ? this.extractSelectedItems() : this._selectedItem;\n  }\n\n  ngOnInit() {\n    this.initConfiguration();\n  }\n\n  ngAfterViewInit() {\n    this.extractTemplateVariables();\n\n    // I called this listener in ngAfterViewInit because I don't want the listener\n    // to be set one time\n    // ngOnInit is fired after ngOnChanges which is called after any change in the view\n    if(!this.disabled) document.addEventListener('click', this.checkIfClickedInside, true);\n  }\n\n  /**\n   * Listener to check if user clicked outside of the autocomplete\n   * If he did then we should hide the suggestion list\n   * So we make sure that the autocomplete acts like any other list\n   */\n  checkIfClickedInside = (event: Event) => {\n    let isClickInside = this.container.nativeElement.contains(event.target);\n    if (!isClickInside) this.displaySuggestions = false;\n    else this.autocompleteInput.nativeElement.focus();\n  };\n\n  /**\n   * Clear autocomplete selection\n   */\n  clearAutocomplete() {\n    this.autocompleteInput.nativeElement.value = '';\n    this._selectedItem = null;\n    this._selectedId = null;\n    this.filteredItems = [];\n  }\n\n  /**\n   * Hide or display suggestions list\n   */\n  toggleDisplaySuggestions() {\n    if (!this.displaySuggestions) {\n      this.openSuggestions();\n    } else {\n      this.closeSuggestions();\n    }\n  }\n\n  /**\n   * Init default configuration\n   */\n  private initConfiguration() {\n    if (!this.configuration.rtl) this.configuration.rtl = false;\n    this.prepareUsedLanguage();\n    if (!this.configuration.multiple) this.configuration.multiple = false;\n    if (!this.configuration.template) this.configuration.template = '<div>#' + this.configuration.value + '#</div>';\n    if (!(<ACRemoteConfiguration> this.configuration).minCharacters) (<ACRemoteConfiguration> this.configuration).minCharacters = 1;\n    if (!(<ACRemoteConfiguration> this.configuration).loadingView)\n      (<ACRemoteConfiguration> this.configuration).loadingView = translator.dictionary.loadingText[this.configuration.language];\n  }\n\n  private prepareUsedLanguage(){\n    if(!this.configuration.language) this.configuration.language = ACTranslator.EN;\n    if(this.configuration.language && translator.availableLanguages.indexOf(this.configuration.language) == -1){\n      let translation = dynamic_translation(\n        this.translator.dictionary.errors.unknownLanguage[ACTranslator.EN],\n        [this.configuration.language, JSON.stringify(translator.availableLanguages)]\n      );\n      throw new Error(translation);\n    }\n\n  }\n\n  /**\n   * Search and select item by key value\n   */\n  private searchAndSelectItemFromKey() {\n    if ((<ACLocalConfiguration> this.configuration).data) {// if it's local configuration\n\n      this.selectItemFromData((<ACLocalConfiguration> this.configuration).data);\n\n    } else if ((<ACRemoteConfiguration> this.configuration).url) {// if it's remote configuration\n\n      this.searchRemotely('', (<ACRemoteConfiguration> this.configuration).url, true);\n\n    }\n  }\n\n  /**\n   * Search and select item from data by the value of the key\n   * @param data: any[]\n   */\n  private selectItemFromData(data: Array<any>) {\n\n    if (this.configuration.multiple) {\n      this._selectedItem = [];\n      let counter = 0;\n      data.forEach(item => {\n        if ((<Array<number | string>> this._selectedId).includes(item[this.configuration.key])) {\n          let si: SelectedItem = {elem: item, indexInFilteredItems: counter};\n          this._selectedItem.push(si);\n        }\n        counter++;\n      });\n    } else {\n      this._selectedItem = null;\n      data.forEach(item => {\n        if (item[this.configuration.key] == this._selectedId) {\n          this._selectedItem = item;\n          this.autocompleteInput.nativeElement.value = this._selectedItem[this.configuration.value];\n        }\n      });\n    }\n    // make sure to dispatch data after selection\n    this.dispatchData();\n  }\n\n  /**\n   * Extract available keys from template\n   * will be used to dislay data in the suggestions panel\n   */\n  private extractTemplateVariables() {\n    // Regex to find the words between to #\n    // may contain numbers and dots\n    const regx = /\\#(?:[a-zA-Z0-9_\\.]+)\\#/g;\n\n    // get matched result\n    this._templateVariables = this.configuration.template.match(regx);\n  }\n\n  /**\n   * fired each time a user press a key\n   * @param $event\n   */\n  onKeyup($event) {\n\n    if (this.fireSearchKey($event)) {\n      const reg = $event.target.value;\n      if (reg == '') {\n        this.displaySuggestions = false;\n        if (!this.configuration.multiple) {\n\n          this.clearAutocomplete();\n          this.dispatchData();\n        }\n      } else {\n\n        if ((<ACLocalConfiguration> this.configuration).data) {// if it's local configuration\n          this.displaySuggestions = true;\n          this.searchLocally(reg, (<ACLocalConfiguration> this.configuration).data);\n\n        } else if ((<ACRemoteConfiguration> this.configuration).url) {// if it's remote configuration\n          // when working remotely and for better user experience\n          // the searchRemotely function will be fired when user finish typing\n          // and we assume that finishing typing means not pressing key for like 250ms\n          if((<ACRemoteConfiguration> this.configuration).minCharacters <= reg.length){// make sure to call api after typing the need number of characters\n            this.displaySuggestions = true;\n            this.loadingData = true;\n            this.filteredItems = [];\n            if (this.typingTimer != null) clearTimeout(this.typingTimer);\n            this.typingTimer = setTimeout(() => {\n              this.searchRemotely(reg, (<ACRemoteConfiguration> this.configuration).url);\n            }, this.doneTypingInterval);\n          }\n        }\n      }\n    } else if (this.navigationKey($event)) {\n      $event.preventDefault();\n      this.navigate($event.which);\n    }\n  }\n\n  private navigate(key){\n    this.clearAllSelections();\n    switch(key){\n      case 38:// up key pressed\n        if(this._selectedIndexFromNavigation > 0) this._selectedIndexFromNavigation--;\n        this.enableSelectionForSelectedSuggestion(this._selectedIndexFromNavigation);\n        break;\n      case 40:// down key pressed\n        if(this._selectedIndexFromNavigation < this.filteredItems.length - 1) this._selectedIndexFromNavigation++;\n        this.enableSelectionForSelectedSuggestion(this._selectedIndexFromNavigation);\n        break;\n      case 13:// enter key pressed\n        let item: any = (this.configuration.group == null) ?\n          this.filteredItems[this._selectedIndexFromNavigation] :\n          // in case of using group _selectedIndexFromNavigation does not map with the correct index of filteredItems\n          // that's why we do an extra work to get the correct item from the available index\n          this.getItemFromGroup(this._selectedIndexFromNavigation);\n\n        this.performSelection(item);\n        break;\n    }\n  }\n\n  /**\n   * Get the right selected item when pressing enter key\n   * @param i\n   * @returns right item\n   */\n  private getItemFromGroup(i: number){\n    let counter = 0;\n    let selectedItem = null;\n    console.log('groups', this.groups);\n    for(let grp of this.groups){\n      console.log('grp', grp);\n      let _a: Array<any> = this.filteredGroupedItems[grp];\n      for(let item of _a){\n        if(i == counter) selectedItem = item;\n        counter++;\n      }\n    }\n    return selectedItem;\n  }\n\n  private enableSelectionForSelectedSuggestion(index: number){\n    let sg: SlarnAutocompleteSuggestionComponent = this.suggestions.find((e, i, array) => {\n      return (i == index);\n    });\n    sg.focusSuggestion = true;\n  }\n\n  /**\n   *\n   */\n  private clearAllSelections(){\n    this.suggestions.forEach((sg: SlarnAutocompleteSuggestionComponent, index: number, array) => {\n        sg.focusSuggestion = false;\n    });\n  }\n\n  /**\n   * Delete item from selected list and dispatch changes\n   * @param indexInSelectedItems\n   * @param si\n   */\n  deleteFromSelectedItems(indexInSelectedItems: number, si: SelectedItem) {\n    this._selectedItem.splice(indexInSelectedItems, 1);\n    this.filteredItems.splice(si.indexInFilteredItems, 0, si.elem);\n    this.buildGroupsIfNeeded();\n    (<Array<number | string>> this._selectedId).splice(indexInSelectedItems, 1);\n\n    if (this._selectedItem.length == 0) {\n      this._selectedItem = null;\n      this._selectedId = null;\n    }\n\n    this.dispatchData();\n  }\n\n  /**\n   * After key down clear used timer to calculate\n   * when user finished typing\n   */\n  onKeyDown($event) {\n    if (this.typingTimer != null) clearTimeout(this.typingTimer);\n  }\n\n  /**\n   * Check if this an alphabet or number key\n   * @param $event keyup event\n   * @return fireKeySearch\n   */\n  private fireSearchKey($event): boolean {\n    return (\n      ($event.which <= 105 && $event.which >= 48) ||\n      (this._keys.searchTriggerKeys.indexOf($event.which) > -1)\n    );\n  }\n\n  /**\n   * Check if pressed key is a navigation key\n   * @param $event\n   * @returns\n   */\n  private navigationKey($event): boolean {\n    return (this._keys.navigationKeys.indexOf($event.which) > -1)\n  }\n\n  /**\n   * If it's a local configuration then we will search inside the configuration.data object\n   * @param word word to search\n   * @param data filtered data\n   */\n  private searchLocally(word: string, data: Array<any>) {\n    this.filteredItems = [];\n    data.forEach((item) => {\n      let _str = JSON.stringify(item);\n      if (\n        _str.toLowerCase().indexOf(word.toLowerCase()) != -1 // if word exist in item\n        && !this.existInSelectedItems(item) // and does not exist in selected items\n      ) this.filteredItems.push(item);// then add it to filteredItems to be displayed in suggestions list\n\n      this.buildGroupsIfNeeded();\n    });\n  }\n\n  /**\n   * Check if given item exist in _selectedItem array ot not\n   * @param item\n   */\n  private existInSelectedItems(item: any): boolean {\n    let exist: boolean;\n    if (!Array.isArray(this._selectedItem)) {\n      exist = false;\n    } else {\n      exist = (this._selectedItem.find(si =>\n        si.elem[this.configuration.key] === item[this.configuration.key]\n      ) != undefined);\n    }\n    return exist;\n  }\n\n  /**\n   * If it's a remote configuration then we get the word and add it to the url\n   * before sending the request to the api\n   * @param word word to search\n   * @param url api url\n   * @param selectItemAfterSearch\n   */\n  private searchRemotely(word: string, url: string, selectItemAfterSearch?: boolean) {\n    this.loadingData = true;\n    this.filteredItems = [];\n    this._service.search(word, url).subscribe(res => {\n      // only push items who are not in _selectedItems list\n      res.forEach((item) => {\n        if (!this.existInSelectedItems(item)) this.filteredItems.push(item);\n      });\n      if (selectItemAfterSearch) this.selectItemFromData(this.filteredItems);\n      this.buildGroupsIfNeeded();\n      this.loadingData = false;\n    });\n  }\n\n  /**\n   * If grouping is requested by the user then we need to prepare it\n   */\n  private buildGroupsIfNeeded(){\n    if(this.configuration.group != null){\n      // console.log('before grouping', this.filteredItems);\n      this.groups = [];\n      this.filteredGroupedItems = {};\n\n      let groupedData = this.group(this.filteredItems, this.configuration.group.field);\n      let self = this;\n      Object.keys(groupedData).sort().forEach(function(key) {\n        self.filteredGroupedItems[key] = groupedData[key];\n      });\n      this.groups = Object.keys(this.filteredGroupedItems);\n      // console.log('filteredGroupedItems', this.filteredGroupedItems);\n      // console.log('groups', this.groups);\n    }\n  }\n\n  /**\n   * Pares array of items and return grouped object by the given field\n   * @param list\n   * @param keyGetter\n   * @returns Grouped object\n   */\n  private group(list, keyGetter) {\n    if(typeof keyGetter === 'undefined')\n      throw new Error(this.translator.dictionary.errors.unknownFieldForGroupOption[this.configuration.language]);\n    const map = {};\n    list.forEach((item) => {\n      const key = keyGetter(item);\n      if (!(key in map)) map[key] = [];\n      map[key].push(item);\n    });\n    return map;\n  }\n\n  /**\n   * Build view with data based on the given template\n   * @param object\n   * @return string built view\n   */\n  buildSuggestionView(object: any): string {\n    // console.log('object.toString()', object.toString());\n    let view: string = this.configuration.template;\n    this._templateVariables.forEach((res: string) => {\n      let key = res.replace(/\\#/g, '');// remove # from the string\n      let value: string = this.extractValue(key, object);\n      view = view.replace(res, value);// replace words with object value\n    });\n    return view;\n  }\n\n  /**\n   * Build the view of the group based on giving template\n   * @param group\n   * @returns\n   */\n  buildGroupView(group: string){\n    let template: string;\n    if(!this.configuration.group.template || this.configuration.group.template == '')\n      template = '<div style=\"background: #a7a3a3;padding: 5px;font-weight: bold;color: #fff;\">#__group__#</div>';\n    else\n      template = this.configuration.group.template;\n    return template.replace('#__group__#', group);\n  }\n  \n  /**\n   * Check if item is listed as unselectable item\n   * by checking if it exist in this.unselectable array\n   * \n   * @param item\n   */\n  isItemUnselectable(item: any){\n    return (this.unselectable.includes(item[this.configuration.key]));\n  }\n\n  /**\n   * Extract the correct value from the multidimensional object\n   * @param keysString: string with keys separated by dots\n   * @param object\n   * @returns correct value\n   */\n  private extractValue(keysString: string, object: any): string {\n    let result: string = null;\n    let keys: Array<string> = keysString.split('.');\n    let size = keys.length;\n    let counter = 1;\n    let _currentObject = object;\n\n    keys.forEach(key => {\n      if (!(key in _currentObject)){\n        let translation = dynamic_translation(\n          this.translator.dictionary.errors.unknownKeyValue[this.configuration.language],\n          [key, JSON.stringify(_currentObject)]\n        );\n        throw new Error(translation);\n      }\n\n      if (counter < size) {\n        _currentObject = _currentObject[key];\n      } else {\n        result = _currentObject[key];\n      }\n      counter++;\n    });\n    return result;\n  }\n\n  /**\n   * Triggered after a user select a suggestion\n   * @param item selected item from the list\n   */\n  performSelection(item: any) {\n    // console.log('selected item', item);\n    if (this.configuration.multiple) {\n\n      let index = this.filteredItems.findIndex(e => e[this.configuration.key] == item[this.configuration.key]);\n      // console.log('index', index);\n      if (this._selectedItem == null) this._selectedItem = [];\n      let o: SelectedItem = {elem: item, indexInFilteredItems: index};\n      console.log('o', o);\n      this._selectedItem.push(o);\n      this.filteredItems.splice(index, 1);\n      if (this.filteredItems.length == 0) this.displaySuggestions = false;// if filteredItems list is empty then hide suggestions list\n      this.buildGroupsIfNeeded();\n\n      if (this._selectedId == null) this._selectedId = [];\n      (<Array<number | string>> this._selectedId).push(item[this.configuration.key]);\n      this.autocompleteInput.nativeElement.value = '';\n    } else {\n      this._selectedItem = item;\n      this._selectedId = item[this.configuration.key];\n      this.autocompleteInput.nativeElement.value = this._selectedItem[this.configuration.value];\n      this.displaySuggestions = false;\n    }\n    this._selectedIndexFromNavigation = -1;\n    this.dispatchData();\n  }\n\n  /**\n   * Dispatch data to external components\n   */\n  private dispatchData() {\n    // emit the whole object when item selected\n    if (Array.isArray(this._selectedItem))\n      this.onItemSelected.emit(this.extractSelectedItems());\n    else\n      this.onItemSelected.emit(this._selectedItem);\n\n    // propagate only the key to the form\n    // console.log('propagation _selectedId: ' + this._selectedId);\n    if (this.propagateChange != null) this.propagateChange(this._selectedId);\n  }\n\n  /**\n   * Extract items from _selectedItems\n   */\n  private extractSelectedItems() {\n    let items = [];\n    (<Array<SelectedItem>> this._selectedItem).forEach(si => {\n      items.push(si.elem);\n    });\n    return items;\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) { }\n\n  writeValue(value) {\n    // after setting key value we search for the related item\n\n    if (value != '' && value != null && value != undefined) {\n      this.filterSelectedValue(value);\n      this.searchAndSelectItemFromKey();\n    }else{\n      this.clearAutocomplete();\n      this.dispatchData();\n    }\n  }\n\n  //======================================================================\n  //        FUNCTIONS FOR EXTERNAL USAGE\n  //======================================================================\n  /**\n   * Open suggestions list\n   */\n  openSuggestions(){\n    if(this.disabled) return;\n    \n    if(!this.displaySuggestions){\n      this.displaySuggestions = true;\n      if ((<ACLocalConfiguration> this.configuration).data) {// if it's local configuration\n\n        this.searchLocally('', (<ACLocalConfiguration> this.configuration).data);\n\n      } else if ((<ACRemoteConfiguration> this.configuration).url) {// if it's remote configuration\n\n        this.searchRemotely('', (<ACRemoteConfiguration> this.configuration).url);\n\n      }\n    }\n  }\n\n  /**\n   * Close suggestions list\n   */\n  closeSuggestions(){\n    this.displaySuggestions = false;\n  }\n\n  /**\n   * Add new item to data\n   * If there is another item with the same \"key\" value then the it will not be added\n   * @param item\n   * @param selectIt boolean: select the item after adding if true (false by default)\n   */\n  appendItem(item: any, selectIt: boolean){\n    if ((<ACLocalConfiguration> this.configuration).data) {\n      selectIt = (typeof selectIt === 'undefined') ? false : selectIt;\n      let i =this.findItem((<ACLocalConfiguration> this.configuration).data, item);\n      if(i == undefined){\n        (<ACLocalConfiguration> this.configuration).data.push(item);\n        if(selectIt) this.performSelection(item);\n      }else{\n        let translation = dynamic_translation(\n          this.translator.dictionary.errors.duplicateItemDetected[this.configuration.language],\n          [JSON.stringify(i), JSON.stringify(item)]\n        );\n        throw new Error(translation);\n      }\n\n    }else{\n      throw new Error(this.translator.dictionary.errors.appendItemWorkOnlyLocally[this.configuration.language]);\n    }\n  }\n\n  /**\n   * Find if item already exist in data\n   * @param data\n   * @param item\n   * @returns\n   */\n  private findItem(data: Array<any>, item: any){\n    return data.find(elem => {\n      return (elem[this.configuration.key] == item[this.configuration.key]);\n    });\n  }\n}\n\n\n/**\n * Suggestion component for Autocomplete\n */\n@Component({\n  selector: 'slarn-ac-suggestion',\n  template: `\n    <div [class.unselectable]=\"unselectable\" class=\"sg\" (click)=\"selectItem()\" [focused]=\"focusSuggestion\">\n      <div *ngIf=\"unselectable\" class=\"suggestion-curtain\"></div>\n      <div class=\"content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .sg {\n      cursor: default;\n      position: relative;\n    }\n\n    .sg .content{\n      padding: 5px;\n    }\n\n    .sg .suggestion-curtain{\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background: #ffffffa3;\n      cursor: not-allowed;\n    }\n\n    .sg:not(.unselectable):hover {\n      background: #ececec;\n    }\n\n  `],\n})\nexport class SlarnAutocompleteSuggestionComponent implements OnInit {\n  @Input('item') item: any;\n  @Input('unselectable') unselectable: boolean = false;\n  @Output('onSuggestionClicked') onSuggestionClicked: EventEmitter<any> = new EventEmitter();\n  focusSuggestion: boolean = false;\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  selectItem() {\n    if(!this.unselectable) this.onSuggestionClicked.emit(this.item);\n    else console.log('this item is unselectable', this.item);\n  }\n}\n\n/**\n * AutoComplete configuration\n */\nexport interface Configuration {\n  /**\n   * key will be stored in the input\n   * must be the unique value of the object (ex: id)\n   * will be used to search item and when sending form\n   */\n  key: string;\n\n  /**\n   * value will be displayed to the user in the input\n   */\n  value: string;\n\n  /**\n   * template that will be displayed in the suggestions list\n   * if this attribute is not defined then the autocomplete will\n   * use the default template and display only the value\n   */\n  template?: string;\n\n  /**\n   * The language that will be used to display default texts and errors\n   */\n  language?: string;\n\n  /**\n   * RTL Support (false by default)\n   */\n  rtl?: boolean;\n\n  /**\n   * name will be giving to the input\n   */\n  name?: string\n\n  /**\n   * allow multiple selection (default: false)\n   */\n  multiple?: boolean;\n\n  /**\n   * allow to group items by a specific field\n   */\n  group?: Group;\n}\n\n/**\n * Remote configuration used when you want to work remotely with an api\n */\nexport interface ACRemoteConfiguration extends Configuration {\n  /**\n   * URL to the API\n   */\n  url: string;\n\n  /**\n   * number of characters needed before calling api\n   */\n  minCharacters?: number;\n\n  /**\n   * text or html will be rendered when loading data remotely\n   */\n  loadingView?: string;\n}\n\n/**\n * Local configuration: used if you want to pass data explicitly to the AutoComplete\n */\nexport interface ACLocalConfiguration extends Configuration {\n  data: Array<any>;\n}\n\n/**\n * Group items\n */\nexport interface Group{\n  /**\n   * Arrow function to specify the group field\n   * Used arrow function instead of a simple field cuz the group field can be a field of another complex object\n   */\n  field: any;\n\n  /**\n   * Block that will be rendered for the group\n   */\n  template?: string;\n}\n\n/**\n * We will use this object to store selected items\n */\nexport interface SelectedItem {\n  elem: any;// selected object\n  indexInFilteredItems: number;// keep track of it's index in filteredItems so we can return it to it's exact place\n}\n","\nimport {Directive, ElementRef, HostListener, Input} from \"@angular/core\";\n\n@Directive({\n  selector: '[autoGrow]',\n\n})\nexport class AutoGrowDirective{\n  @Input('activated') activated: boolean = true;\n  constructor(private elem: ElementRef){}\n\n  @HostListener('keyup')\n  @HostListener('keydown')\n  @HostListener('keypress ')\n  autoGrow(){\n    if(this.activated){\n      let input = this.elem.nativeElement;\n      this.fireAutoGrow(input);\n    }\n  }\n\n  private fireAutoGrow(input){\n    let pad_right = 5;\n    let tmp = document.createElement('div');\n    tmp.style.padding = '0';\n    if(getComputedStyle)\n      tmp.style.cssText = getComputedStyle(input, null).cssText;\n    if(input.currentStyle)\n      tmp.style.cssText = input.currentStyle.cssText;\n    tmp.style.width = '';\n    tmp.style.position = 'absolute';\n\n    tmp.innerHTML = input.value\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\")\n      .replace(/ /g, '&nbsp;')\n    ;\n\n    input.parentNode.appendChild(tmp);\n    let width = tmp.clientWidth+pad_right+1;\n    tmp.parentNode.removeChild(tmp);\n    input.style.width = width+'px';\n  }\n}\n","import {Directive, Input, Renderer2, ElementRef} from '@angular/core';\n\n@Directive({\n  selector: '[focused]'\n})\nexport class FocusedDirective {\n  @Input()\n  set focused(value: boolean){\n    if(value){\n      //this.renderer.invokeElementMethod(this.elementRef.nativeElement, 'scrollIntoViewIfNeeded');\n      this.renderer.selectRootElement(this.elementRef.nativeElement).scrollIntoView();\n      this.elementRef.nativeElement.style.background = '#ececec';\n    }else{\n      this.elementRef.nativeElement.style.background = null;\n    }\n  }\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2){}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {DomSanitizer, SafeHtml} from \"@angular/platform-browser\";\n\n@Pipe({\n  name: 'renderSafely'\n})\nexport class RenderSafelyPipe implements PipeTransform  {\n  constructor(private sanitized: DomSanitizer) {}\n  transform(value: string): SafeHtml {\n    return this.sanitized.bypassSecurityTrustHtml(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SlarnAutocompleteComponent, SlarnAutocompleteSuggestionComponent } from './autocomplete/slarn-autocomplete.component';\nimport { ACService } from './autocomplete/slarn-autocomplete.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport {AutoGrowDirective} from \"./autocomplete/auto-grow.directive\";\nimport {FocusedDirective} from \"./autocomplete/focus.directive\";\nimport {RenderSafelyPipe} from \"./autocomplete/render-safely.pipe\";\n\n@NgModule({\n  imports: [\n    CommonModule, HttpClientModule\n  ],\n  declarations: [\n    SlarnAutocompleteComponent, SlarnAutocompleteSuggestionComponent, AutoGrowDirective, FocusedDirective, RenderSafelyPipe\n  ],\n  providers: [ACService],\n  exports: [\n    SlarnAutocompleteComponent\n  ]\n})\nexport class SlarnAutocompleteModule { }\n","/*\n * Public API Surface of slarn-autocomplete-ca\n */\n\nexport * from './lib/autocomplete/slarn-autocomplete.service';\nexport * from './lib/autocomplete/slarn-autocomplete.component';\nexport * from './lib/slarn-autocomplete.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AutoGrowDirective as ɵa} from './lib/autocomplete/auto-grow.directive';\nexport {FocusedDirective as ɵb} from './lib/autocomplete/focus.directive';\nexport {RenderSafelyPipe as ɵc} from './lib/autocomplete/render-safely.pipe';"],"names":[],"mappings":";;;;;;;;IAOI,mBACY,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;KACxB;IAEL,0BAAM,GAAN,UAAO,IAAY,EAAE,GAAW;QAC5B,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC1C;;gBAPkB,UAAU;;IAHpB,SAAS;QADrB,UAAU,EAAE;OACA,SAAS,CAWrB;IAAD,gBAAC;CAXD;;ACLA;;;AAGA,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,yBAAS,CAAA;IACT,yBAAS,CAAA;IACT,yBAAS,CAAA;AACX,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAED;;;AAGO,IAAM,UAAU,GAAQ;;IAE7B,kBAAkB,EAAE,CAAC,YAAY,CAAC,EAAE,EAAE,YAAY,CAAC,EAAE,EAAE,YAAY,CAAC,EAAE,CAAC;;IAGvE,UAAU,EAAE;QACV,WAAW,EAAE;YACX,IAAI,EAAE,iBAAiB;YACvB,IAAI,EAAE,2BAA2B;YACjC,IAAI,EAAE,mBAAmB;SAC1B;QACD,gBAAgB,EAAE;YAChB,IAAI,EAAE,iBAAiB;YACvB,IAAI,EAAE,yBAAyB;YAC/B,IAAI,EAAE,gBAAgB;SACvB;QACD,MAAM,EAAC;YACL,qCAAqC,EAAE;gBACrC,IAAI,EAAE,oIAAoI;gBAC1I,IAAI,EAAE,yIAAyI;gBAC/I,IAAI,EAAE,4FAA4F;aACnG;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,iFAAiF;gBACvF,IAAI,EAAE,mFAAmF;gBACzF,IAAI,EAAE,oFAAoF;aAC3F;YACD,eAAe,EAAE;gBACf,IAAI,EAAE,0FAA0F;gBAChG,IAAI,EAAE,0FAA0F;gBAChG,IAAI,EAAE,6EAA6E;aACpF;YACD,0BAA0B,EAAC;gBACzB,IAAI,EAAE,0FAA0F;gBAChG,IAAI,EAAE,6EAA6E;gBACnF,IAAI,EAAE,2DAA2D;aAClE;YACD,eAAe,EAAE;gBACf,IAAI,EAAE,8CAA8C;gBACpD,IAAI,EAAE,wDAAwD;gBAC9D,IAAI,EAAE,gDAAgD;aACvD;YACD,qBAAqB,EAAE;gBACrB,IAAI,EAAE,2GAA2G;gBACjH,IAAI,EAAE,oHAAoH;gBAC1H,IAAI,EAAE,wFAAwF;aAC/F;YACD,yBAAyB,EAAE;gBACzB,IAAI,EAAE,4NAA4N;gBAClO,IAAI,EAAE,yOAAyO;gBAC/O,IAAI,EAAE,0LAA0L;aACjM;SACF;KACF;CACF,CAAC;AAEF;;;;;;SAMgB,mBAAmB,CAAC,OAAe,EAAE,MAAkB;IACrE,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;QAClB,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,GAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC9C,OAAO,EAAE,CAAC;KACX,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB;;;IClBE,oCAAoB,QAAmB;QAAvC,iBAEC;QAFmB,aAAQ,GAAR,QAAQ,CAAW;;;;;;QA5B/B,UAAK,GAAG;YACd,iBAAiB,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,cAAc,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;SAC7B,CAAC;QACM,oBAAe,GAAQ,IAAI,CAAC;QAC5B,gBAAW,GAAG,IAAI,CAAC;QACnB,uBAAkB,GAAG,GAAG,CAAC;QACzB,iCAA4B,GAAW,CAAC,CAAC,CAAC;;QAGlD,uBAAkB,GAAY,KAAK,CAAC;QACpC,gBAAW,GAAY,KAAK,CAAC;QAC7B,kBAAa,GAAe,EAAE,CAAC;QAC/B,WAAM,GAAkB,IAAI,CAAC;QAE7B,eAAU,GAAG,UAAU,CAAC;QAUD,iBAAY,GAA2B,EAAE,CAAC;QACvC,mBAAc,GAAsB,IAAI,YAAY,EAAE,CAAC;;;;;;QA8EjF,yBAAoB,GAAG,UAAC,KAAY;YAClC,IAAI,aAAa,GAAG,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACxE,IAAI,CAAC,aAAa;gBAAE,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;;gBAC/C,KAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SACnD,CAAC;;KA9ED;mCAxCU,0BAA0B;IA2CrC,sBAAI,kDAAU;;;;aA0Cd;YACE,OAAO,IAAI,CAAC,WAAW,CAAC;SACzB;aA5CD,UAAe,KAA+C;YAC5D,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACnC;;;OAAA;;;;;;IAOO,wDAAmB,GAA3B,UAA4B,KAAK;QAC/B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;;QAEzB,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;YAExD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,qCAAqC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QAExH,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;gBACjD,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;YACvD,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC/F;;;;;IAMO,mDAAc,GAAtB,UAAuB,KAAiB;QACtC,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;YACb,IAAI,OAAO,CAAC,KAAK,QAAQ;gBAAE,SAAS,GAAG,IAAI,CAAC;SAC7C,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;KAClB;IAYD,sBAAI,oDAAY;;;;aAAhB;YACE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,oBAAoB,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;SAC/F;;;OAAA;IAED,6CAAQ,GAAR;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,oDAAe,GAAf;QACE,IAAI,CAAC,wBAAwB,EAAE,CAAC;;;;QAKhC,IAAG,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;KACxF;;;;IAgBD,sDAAiB,GAAjB;QACE,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,GAAG,EAAE,CAAC;QAChD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KACzB;;;;IAKD,6DAAwB,GAAxB;QACE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC5B,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;KACF;;;;IAKO,sDAAiB,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG;YAAE,IAAI,CAAC,aAAa,CAAC,GAAG,GAAG,KAAK,CAAC;QAC5D,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ;YAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ;YAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC;QAChH,IAAI,CAA0B,IAAI,CAAC,aAAc,CAAC,aAAa;YAA2B,IAAI,CAAC,aAAc,CAAC,aAAa,GAAG,CAAC,CAAC;QAChI,IAAI,CAA0B,IAAI,CAAC,aAAc,CAAC,WAAW;YAClC,IAAI,CAAC,aAAc,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KAC7H;IAEO,wDAAmB,GAA3B;QACE,IAAG,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ;YAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,YAAY,CAAC,EAAE,CAAC;QAC/E,IAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAC;YACzG,IAAI,WAAW,GAAG,mBAAmB,CACnC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,EAClE,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAC7E,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;SAC9B;KAEF;;;;IAKO,+DAA0B,GAAlC;QACE,IAA4B,IAAI,CAAC,aAAc,CAAC,IAAI,EAAE;YAEpD,IAAI,CAAC,kBAAkB,CAAyB,IAAI,CAAC,aAAc,CAAC,IAAI,CAAC,CAAC;SAE3E;aAAM,IAA6B,IAAI,CAAC,aAAc,CAAC,GAAG,EAAE;YAE3D,IAAI,CAAC,cAAc,CAAC,EAAE,EAA2B,IAAI,CAAC,aAAc,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAEjF;KACF;;;;;IAMO,uDAAkB,GAA1B,UAA2B,IAAgB;QAA3C,iBAuBC;QArBC,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,SAAO,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,OAAO,CAAC,UAAA,IAAI;gBACf,IAA8B,KAAI,CAAC,WAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;oBACtF,IAAI,EAAE,GAAiB,EAAC,IAAI,EAAE,IAAI,EAAE,oBAAoB,EAAE,SAAO,EAAC,CAAC;oBACnE,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBAC7B;gBACD,SAAO,EAAE,CAAC;aACX,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,UAAA,IAAI;gBACf,IAAI,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,KAAI,CAAC,WAAW,EAAE;oBACpD,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;oBAC1B,KAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,GAAG,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;iBAC3F;aACF,CAAC,CAAC;SACJ;;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAMO,6DAAwB,GAAhC;;;QAGE,IAAM,IAAI,GAAG,0BAA0B,CAAC;;QAGxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACnE;;;;;IAMD,4CAAO,GAAP,UAAQ,MAAM;QAAd,iBAoCC;QAlCC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YAC9B,IAAM,KAAG,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAChC,IAAI,KAAG,IAAI,EAAE,EAAE;gBACb,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;oBAEhC,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,IAAI,CAAC,YAAY,EAAE,CAAC;iBACrB;aACF;iBAAM;gBAEL,IAA4B,IAAI,CAAC,aAAc,CAAC,IAAI,EAAE;oBACpD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,aAAa,CAAC,KAAG,EAA0B,IAAI,CAAC,aAAc,CAAC,IAAI,CAAC,CAAC;iBAE3E;qBAAM,IAA6B,IAAI,CAAC,aAAc,CAAC,GAAG,EAAE;;;;oBAI3D,IAA4B,IAAI,CAAC,aAAc,CAAC,aAAa,IAAI,KAAG,CAAC,MAAM,EAAC;wBAC1E,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;wBACxB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI;4BAAE,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAC7D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;4BAC5B,KAAI,CAAC,cAAc,CAAC,KAAG,EAA2B,KAAI,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC;yBAC5E,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;qBAC7B;iBACF;aACF;SACF;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YACrC,MAAM,CAAC,cAAc,EAAE,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC7B;KACF;IAEO,6CAAQ,GAAhB,UAAiB,GAAG;QAClB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,QAAO,GAAG;YACR,KAAK,EAAE;gBACL,IAAG,IAAI,CAAC,4BAA4B,GAAG,CAAC;oBAAE,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBAC9E,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;gBAC7E,MAAM;YACR,KAAK,EAAE;gBACL,IAAG,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC;oBAAE,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBAC1G,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;gBAC7E,MAAM;YACR,KAAK,EAAE;gBACL,IAAI,IAAI,GAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI;oBAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,4BAA4B,CAAC;;;oBAGrD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;gBAE3D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAC5B,MAAM;SACT;KACF;;;;;;IAOO,qDAAgB,GAAxB,UAAyB,CAAS;;QAChC,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;;YACnC,KAAe,IAAA,KAAA,SAAA,IAAI,CAAC,MAAM,CAAA,gBAAA,4BAAC;gBAAvB,IAAI,GAAG,WAAA;gBACT,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBACxB,IAAI,EAAE,GAAe,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;;oBACpD,KAAgB,IAAA,sBAAA,SAAA,EAAE,CAAA,CAAA,sBAAA,sCAAC;wBAAf,IAAI,IAAI,eAAA;wBACV,IAAG,CAAC,IAAI,OAAO;4BAAE,YAAY,GAAG,IAAI,CAAC;wBACrC,OAAO,EAAE,CAAC;qBACX;;;;;;;;;aACF;;;;;;;;;QACD,OAAO,YAAY,CAAC;KACrB;IAEO,yEAAoC,GAA5C,UAA6C,KAAa;QACxD,IAAI,EAAE,GAAyC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,KAAK;YAC/E,QAAQ,CAAC,IAAI,KAAK,EAAE;SACrB,CAAC,CAAC;QACH,EAAE,CAAC,eAAe,GAAG,IAAI,CAAC;KAC3B;;;;IAKO,uDAAkB,GAA1B;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,EAAwC,EAAE,KAAa,EAAE,KAAK;YACpF,EAAE,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B,CAAC,CAAC;KACJ;;;;;;IAOD,4DAAuB,GAAvB,UAAwB,oBAA4B,EAAE,EAAgB;QACpE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACD,IAAI,CAAC,WAAY,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QAE5E,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,EAAE;YAClC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAMD,8CAAS,GAAT,UAAU,MAAM;QACd,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI;YAAE,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC9D;;;;;;IAOO,kDAAa,GAArB,UAAsB,MAAM;QAC1B,QACE,CAAC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,KAAK,IAAI,EAAE;aACzC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EACzD;KACH;;;;;;IAOO,kDAAa,GAArB,UAAsB,MAAM;QAC1B,QAAQ,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAC;KAC9D;;;;;;IAOO,kDAAa,GAArB,UAAsB,IAAY,EAAE,IAAgB;QAApD,iBAWC;QAVC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,UAAC,IAAI;YAChB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAChC,IACE,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC;mBACjD,CAAC,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;;gBACnC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEhC,KAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B,CAAC,CAAC;KACJ;;;;;IAMO,yDAAoB,GAA5B,UAA6B,IAAS;QAAtC,iBAUC;QATC,IAAI,KAAc,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YACtC,KAAK,GAAG,KAAK,CAAC;SACf;aAAM;YACL,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,EAAE;gBACjC,OAAA,EAAE,CAAC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC;aAAA,CACjE,IAAI,SAAS,CAAC,CAAC;SACjB;QACD,OAAO,KAAK,CAAC;KACd;;;;;;;;IASO,mDAAc,GAAtB,UAAuB,IAAY,EAAE,GAAW,EAAE,qBAA+B;QAAjF,iBAYC;QAXC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;;YAE3C,GAAG,CAAC,OAAO,CAAC,UAAC,IAAI;gBACf,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;oBAAE,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrE,CAAC,CAAC;YACH,IAAI,qBAAqB;gBAAE,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;YACvE,KAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B,CAAC,CAAC;KACJ;;;;IAKO,wDAAmB,GAA3B;QACE,IAAG,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI,EAAC;;YAElC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;YAE/B,IAAI,aAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjF,IAAI,MAAI,GAAG,IAAI,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,aAAW,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAS,GAAG;gBAClD,MAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,aAAW,CAAC,GAAG,CAAC,CAAC;aACnD,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;;;SAGtD;KACF;;;;;;;IAQO,0CAAK,GAAb,UAAc,IAAI,EAAE,SAAS;QAC3B,IAAG,OAAO,SAAS,KAAK,WAAW;YACjC,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,0BAA0B,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7G,IAAM,GAAG,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,OAAO,CAAC,UAAC,IAAI;YAChB,IAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC;gBAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACjC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACZ;;;;;;IAOD,wDAAmB,GAAnB,UAAoB,MAAW;QAA/B,iBASC;;QAPC,IAAI,IAAI,GAAW,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QAC/C,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAC,GAAW;YAC1C,IAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACjC,IAAI,KAAK,GAAW,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACnD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACjC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;KACb;;;;;;IAOD,mDAAc,GAAd,UAAe,KAAa;QAC1B,IAAI,QAAgB,CAAC;QACrB,IAAG,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,IAAI,EAAE;YAC9E,QAAQ,GAAG,gGAAgG,CAAC;;YAE5G,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC/C,OAAO,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KAC/C;;;;;;;IAQD,uDAAkB,GAAlB,UAAmB,IAAS;QAC1B,QAAQ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;KACnE;;;;;;;IAQO,iDAAY,GAApB,UAAqB,UAAkB,EAAE,MAAW;QAApD,iBAwBC;QAvBC,IAAI,MAAM,GAAW,IAAI,CAAC;QAC1B,IAAI,IAAI,GAAkB,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChD,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QACvB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,cAAc,GAAG,MAAM,CAAC;QAE5B,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;YACd,IAAI,EAAE,GAAG,IAAI,cAAc,CAAC,EAAC;gBAC3B,IAAI,WAAW,GAAG,mBAAmB,CACnC,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAC9E,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CACtC,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;aAC9B;YAED,IAAI,OAAO,GAAG,IAAI,EAAE;gBAClB,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;aACtC;iBAAM;gBACL,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;aAC9B;YACD,OAAO,EAAE,CAAC;SACX,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACf;;;;;IAMD,qDAAgB,GAAhB,UAAiB,IAAS;QAA1B,iBAyBC;;QAvBC,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAE/B,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;;YAEzG,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI;gBAAE,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxD,IAAI,CAAC,GAAiB,EAAC,IAAI,EAAE,IAAI,EAAE,oBAAoB,EAAE,KAAK,EAAC,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACpC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC;gBAAE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YACpE,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI;gBAAE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,WAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,GAAG,EAAE,CAAC;SACjD;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1F,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;SACjC;QACD,IAAI,CAAC,4BAA4B,GAAG,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;IAKO,iDAAY,GAApB;;QAEE,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC;YACnC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;;YAEtD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;;QAI/C,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI;YAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1E;;;;IAKO,yDAAoB,GAA5B;QACE,IAAI,KAAK,GAAG,EAAE,CAAC;QACQ,IAAI,CAAC,aAAc,CAAC,OAAO,CAAC,UAAA,EAAE;YACnD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;SACrB,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;KACd;IAED,qDAAgB,GAAhB,UAAiB,EAAE;QACjB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;KAC3B;IAED,sDAAiB,GAAjB,UAAkB,EAAO,KAAK;IAE9B,+CAAU,GAAV,UAAW,KAAK;;QAGd,IAAI,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,SAAS,EAAE;YACtD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACnC;aAAI;YACH,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;KACF;;;;;;;IAQD,oDAAe,GAAf;QACE,IAAG,IAAI,CAAC,QAAQ;YAAE,OAAO;QAEzB,IAAG,CAAC,IAAI,CAAC,kBAAkB,EAAC;YAC1B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAA4B,IAAI,CAAC,aAAc,CAAC,IAAI,EAAE;gBAEpD,IAAI,CAAC,aAAa,CAAC,EAAE,EAA0B,IAAI,CAAC,aAAc,CAAC,IAAI,CAAC,CAAC;aAE1E;iBAAM,IAA6B,IAAI,CAAC,aAAc,CAAC,GAAG,EAAE;gBAE3D,IAAI,CAAC,cAAc,CAAC,EAAE,EAA2B,IAAI,CAAC,aAAc,CAAC,GAAG,CAAC,CAAC;aAE3E;SACF;KACF;;;;IAKD,qDAAgB,GAAhB;QACE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;KACjC;;;;;;;IAQD,+CAAU,GAAV,UAAW,IAAS,EAAE,QAAiB;QACrC,IAA4B,IAAI,CAAC,aAAc,CAAC,IAAI,EAAE;YACpD,QAAQ,GAAG,CAAC,OAAO,QAAQ,KAAK,WAAW,IAAI,KAAK,GAAG,QAAQ,CAAC;YAChE,IAAI,CAAC,GAAE,IAAI,CAAC,QAAQ,CAAyB,IAAI,CAAC,aAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7E,IAAG,CAAC,IAAI,SAAS,EAAC;gBACQ,IAAI,CAAC,aAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5D,IAAG,QAAQ;oBAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aAC1C;iBAAI;gBACH,IAAI,WAAW,GAAG,mBAAmB,CACnC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EACpF,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAC1C,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;aAC9B;SAEF;aAAI;YACH,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC3G;KACF;;;;;;;IAQO,6CAAQ,GAAhB,UAAiB,IAAgB,EAAE,IAAS;QAA5C,iBAIC;QAHC,OAAO,IAAI,CAAC,IAAI,CAAC,UAAA,IAAI;YACnB,QAAQ,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;SACvE,CAAC,CAAC;KACJ;;;gBAhoB6B,SAAS;;IAXP;QAA/B,SAAS,CAAC,mBAAmB,CAAC;yEAA+B;IAClC;QAA3B,SAAS,CAAC,eAAe,CAAC;qEAA2B;IAC9B;QAAvB,SAAS,CAAC,WAAW,CAAC;iEAAuB;IAC1B;QAAnB,SAAS,CAAC,OAAO,CAAC;6DAAmB;IACR;QAA7B,YAAY,CAAC,cAAc,CAAC;mEAA8D;IAEnE;QAAvB,KAAK,CAAC,eAAe,CAAC;qEAAoB;IACxB;QAAlB,KAAK,CAAC,UAAU,CAAC;gEAAmB;IACd;QAAtB,KAAK,CAAC,cAAc,CAAC;oEAA2C;IACvC;QAAzB,MAAM,CAAC,gBAAgB,CAAC;sEAAwD;IAOjF;QADC,KAAK,EAAE;gEAIP;IA9CU,0BAA0B;QAXtC,SAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,w9IAAkD;YAElD,SAAS,EAAE,CAAC;oBACV,OAAO,EAAE,iBAAiB;oBAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,4BAA0B,GAAA,CAAC;oBACzD,KAAK,EAAE,IAAI;iBACZ,CAAC;;SAEH,CAAC;OACW,0BAA0B,CAuqBtC;IAAD,iCAAC;CAvqBD,IAuqBC;AAGD;;;;IA2CE;QAJuB,iBAAY,GAAY,KAAK,CAAC;QACtB,wBAAmB,GAAsB,IAAI,YAAY,EAAE,CAAC;QAC3F,oBAAe,GAAY,KAAK,CAAC;KAEhB;IAEjB,uDAAQ,GAAR,eAAc;IAEd,yDAAU,GAAV;QACE,IAAG,CAAC,IAAI,CAAC,YAAY;YAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;YAC3D,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1D;IAZc;QAAd,KAAK,CAAC,MAAM,CAAC;sEAAW;IACF;QAAtB,KAAK,CAAC,cAAc,CAAC;8EAA+B;IACtB;QAA9B,MAAM,CAAC,qBAAqB,CAAC;qFAA6D;IAHhF,oCAAoC;QAlChD,SAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;YAC/B,QAAQ,EAAE,8RAOT;qBACQ,4WAsBR;SACF,CAAC;OACW,oCAAoC,CAchD;IAAD,2CAAC;CAdD;;;IChuBE,2BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QADhB,cAAS,GAAY,IAAI,CAAC;KACP;IAKvC,oCAAQ,GAAR;QACE,IAAG,IAAI,CAAC,SAAS,EAAC;YAChB,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC1B;KACF;IAEO,wCAAY,GAApB,UAAqB,KAAK;QACxB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACxC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QACxB,IAAG,gBAAgB;YACjB,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC;QAC5D,IAAG,KAAK,CAAC,YAAY;YACnB,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;QACjD,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACrB,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;QAEhC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK;aACxB,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;aACtB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;aACrB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;aACrB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;aACvB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;aACvB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACzB;QAED,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,KAAK,GAAG,GAAG,CAAC,WAAW,GAAC,SAAS,GAAC,CAAC,CAAC;QACxC,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAChC,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,GAAC,IAAI,CAAC;KAChC;;gBApCyB,UAAU;;IADhB;QAAnB,KAAK,CAAC,WAAW,CAAC;wDAA2B;IAM9C;QAHC,YAAY,CAAC,OAAO,CAAC;QACrB,YAAY,CAAC,SAAS,CAAC;QACvB,YAAY,CAAC,WAAW,CAAC;qDAMzB;IAZU,iBAAiB;QAJ7B,SAAS,CAAC;YACT,QAAQ,EAAE,YAAY;SAEvB,CAAC;OACW,iBAAiB,CAuC7B;IAAD,wBAAC;CAvCD;;;ICUE,0BAAoB,UAAsB,EAAU,QAAmB;QAAnD,eAAU,GAAV,UAAU,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAW;KAAG;IAV1E,sBAAI,qCAAO;aAAX,UAAY,KAAc;YACxB,IAAG,KAAK,EAAC;;gBAEP,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,cAAc,EAAE,CAAC;gBAChF,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC;aAC5D;iBAAI;gBACH,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;aACvD;SACF;;;OAAA;;gBAE+B,UAAU;gBAAoB,SAAS;;IAVvE;QADC,KAAK,EAAE;mDASP;IAVU,gBAAgB;QAH5B,SAAS,CAAC;YACT,QAAQ,EAAE,WAAW;SACtB,CAAC;OACW,gBAAgB,CAa5B;IAAD,uBAAC;CAbD;;;ICEE,0BAAoB,SAAuB;QAAvB,cAAS,GAAT,SAAS,CAAc;KAAI;IAC/C,oCAAS,GAAT,UAAU,KAAa;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;KACtD;;gBAH8B,YAAY;;IADhC,gBAAgB;QAH5B,IAAI,CAAC;YACJ,IAAI,EAAE,cAAc;SACrB,CAAC;OACW,gBAAgB,CAK5B;IAAD,uBAAC;CALD;;;ICgBA;KAAwC;IAA3B,uBAAuB;QAZnC,QAAQ,CAAC;YACR,OAAO,EAAE;gBACP,YAAY,EAAE,gBAAgB;aAC/B;YACD,YAAY,EAAE;gBACZ,0BAA0B,EAAE,oCAAoC,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,gBAAgB;aACxH;YACD,SAAS,EAAE,CAAC,SAAS,CAAC;YACtB,OAAO,EAAE;gBACP,0BAA0B;aAC3B;SACF,CAAC;OACW,uBAAuB,CAAI;IAAD,8BAAC;CAAxC;;ACtBA;;;;ACAA;;;;;;"}