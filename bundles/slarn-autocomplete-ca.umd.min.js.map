{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://slarn-autocomplete-ca/lib/autocomplete/translation.ts","ng://slarn-autocomplete-ca/lib/autocomplete/slarn-autocomplete.service.ts","ng://slarn-autocomplete-ca/lib/autocomplete/slarn-autocomplete.component.ts","ng://slarn-autocomplete-ca/lib/autocomplete/auto-grow.directive.ts","ng://slarn-autocomplete-ca/lib/autocomplete/focus.directive.ts","ng://slarn-autocomplete-ca/lib/autocomplete/render-safely.pipe.ts","ng://slarn-autocomplete-ca/lib/slarn-autocomplete.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__values","o","s","Symbol","iterator","m","call","next","value","done","TypeError","ACTranslator","ACService","_http","this","prototype","search","word","url","_url","URL","searchParams","append","get","toString","HttpClient","Injectable","translator","availableLanguages","EN","FR","AR","dictionary","loadingText","en","fr","ar","noMatchFoundText","errors","passingArrayValueWithNoMultipleOption","unknownType","unknownLanguage","unknownFieldForGroupOption","unknownKeyValue","duplicateItemDetected","appendItemWorkOnlyLocally","dynamic_translation","message","values","counter","forEach","replace","SlarnAutocompleteComponent","_service","_this","_keys","searchTriggerKeys","navigationKeys","propagateChange","typingTimer","doneTypingInterval","_selectedIndexFromNavigation","displaySuggestions","loadingData","filteredItems","groups","unselectable","onItemSelected","EventEmitter","checkIfClickedInside","event","container","nativeElement","contains","autocompleteInput","focus","_selectedId","filterSelectedValue","searchAndSelectItemFromKey","configuration","multiple","Array","isArray","push","Error","language","arrayHasObject","hasObject","e","_selectedItem","extractSelectedItems","ngOnInit","initConfiguration","ngAfterViewInit","extractTemplateVariables","disabled","document","addEventListener","clearAutocomplete","toggleDisplaySuggestions","closeSuggestions","openSuggestions","rtl","prepareUsedLanguage","template","minCharacters","loadingView","indexOf","translation","JSON","stringify","data","selectItemFromData","searchRemotely","counter_1","item","includes","si","elem","indexInFilteredItems","dispatchData","_templateVariables","match","onKeyup","$event","fireSearchKey","reg_1","searchLocally","clearTimeout","setTimeout","navigationKey","preventDefault","navigate","which","clearAllSelections","enableSelectionForSelectedSuggestion","group","getItemFromGroup","performSelection","selectedItem","console","log","_d","_e","grp","_a","filteredGroupedItems","_a_1","e_2","_a_1_1","index","suggestions","find","array","focusSuggestion","sg","deleteFromSelectedItems","indexInSelectedItems","splice","buildGroupsIfNeeded","onKeyDown","toLowerCase","existInSelectedItems","undefined","selectItemAfterSearch","subscribe","res","groupedData_1","field","self_1","keys","sort","list","keyGetter","map","buildSuggestionView","object","view","extractValue","buildGroupView","isItemUnselectable","keysString","result","split","size","_currentObject","findIndex","emit","items","registerOnChange","fn","registerOnTouched","writeValue","appendItem","selectIt","findItem","ViewChild","ViewChildren","Input","Output","SlarnAutocompleteComponent_1","Component","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","SlarnAutocompleteSuggestionComponent","onSuggestionClicked","selectItem","AutoGrowDirective","activated","autoGrow","input","fireAutoGrow","tmp","createElement","style","padding","getComputedStyle","cssText","currentStyle","width","position","innerHTML","parentNode","appendChild","clientWidth","removeChild","ElementRef","HostListener","Directive","FocusedDirective","elementRef","renderer","selectRootElement","scrollIntoView","background","Renderer2","RenderSafelyPipe","sanitized","transform","bypassSecurityTrustHtml","DomSanitizer","Pipe","name","SlarnAutocompleteModule","NgModule","imports","CommonModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Enum class contains the available languages\n */\nexport enum ACTranslator{\n  EN = 'en',\n  FR = 'fr',\n  AR = 'ar',\n}\n\n/**\n * Configuration of the translator\n */\nexport const translator: any = {\n  // available languages\n  availableLanguages: [ACTranslator.EN, ACTranslator.FR, ACTranslator.AR],\n\n  // translation book\n  dictionary: {\n    loadingText: {\n      'en': 'Loading data...',\n      'fr': 'Chargement des données...',\n      'ar': 'تحميل البيانات...'\n    },\n    noMatchFoundText: {\n      'en': 'No match found!',\n      'fr': 'Pas de résultat trouvé!',\n      'ar': 'لا يوجد تطابق!'\n    },\n    errors:{\n      passingArrayValueWithNoMultipleOption: {\n        'en': 'You have passed an array value to be selected\\n either change the value or set the \"multiple\" option to true in the configuration.',\n        'fr': 'Vous avez passé une valeur de tableau à sélectionner\\n modifier la valeur ou changer l\\'option \"multiple\" à true dans la configuration.',\n        'ar': 'لقد قمت بتمرير قيمة جدول لاختيارها, عليك بتغير القمة أو تغير الخيار \"multiple\" إلى \"true\".'\n      },\n      unknownType: {\n        'en': 'The type of \"selectedId\" must be number, string or Array of numbers or strings!',\n        'fr': 'Le type de \"selectedId\" doit être number, string ou tableau de numbers ou strings',\n        'ar': 'نوع المتغير \"selectedId\" يجب أن يكون numbers، strings أو مصفوفة numbers أو strings',\n      },\n      unknownLanguage: {\n        'en': 'Unknown language \":1\"!\\n Please make sure to select one of the available languages \":2\".',\n        'fr': 'Langue inconnue \":1\"\\n Assurez-vous de sélectionner l\\'une des langues disponibles \":2\".',\n        'ar': 'اللغة المختارة \":1\" غير معروفة، الرجاء إختيار واحدة من الغات المتوفرة \":2\".'\n      },\n      unknownFieldForGroupOption:{\n        'en': 'You have added the option \"group\" to the autocomplete but forgot to specify the \"field\"!',\n        'fr': 'Vous avez ajouté l\\'option \"group\" mais vous avez oublié l\\'option \"field\"!',\n        'ar': 'لقد قمت بإضافة الخيار \"group\" لكن لم تحدد الخيار \"field\"!',\n      },\n      unknownKeyValue: {\n        'en': 'Can\\'t find the key \":1\" in the object \":2\"!',\n        'fr': 'On ne peux pas trouvé le clé \":1\" dans l\\'object \":2\"!',\n        'ar': 'لم نتمكن من إيجاد المتغير \":1\" في المكون \":2\"!',\n      },\n      duplicateItemDetected: {\n        'en': 'An item with the same \"key\" value already exist in the \"data\" array: \":1\"\\nUnable to append the item \":2\"',\n        'fr': 'An élément avec la même valeur de \"key\" existe dans le tableau \"data\": \":1\"\\nImpossible d\\'ajouter l\\'élément \":2\"',\n        'ar': 'يوجد عنصر بنفس قمة المتغير \"key\" في المصفوفة \"data\": \":1\"\\n لا يمكن إضافة العنصر: \":2\"',\n      },\n      appendItemWorkOnlyLocally: {\n        'en': '\"appendItem()\" function is for local configuration only\\nIf you are using an API (remote configuration) and you add a new object to it then this new object will be available when you start typing in the autocomplete.\\'',\n        'fr': '\"appendItem()\" est une fonction pour la configuration locale\\nSi vous utilisez une API (configuration à distance) et vous ajoutez un nouveau objet donc ce dérnier sera disponible lorsque vous commencez à taper dans l\\'autocomplete.',\n        'ar': '\"appendItem()\" هي وظيفة تستعمل فقط في التكوين المحلي \"ACLocalConfoguration\"\\n إذا كنت تستعمل التكوين عن بعد \"ACRemoteConfiguration\" إذاً العنصر الجديد سيكون متاح حالما تشرع في الكتابة.',\n      }\n    }\n  }\n};\n\n/**\n * Add values to message dynamically and translate it\n * @param message\n * @param values\n * @returns\n */\nexport function dynamic_translation(message: string, values: Array<any>){\n  let counter = 1;\n  values.forEach(value => {\n    message = message.replace(':'+counter, value);\n    counter++;\n  });\n\n  return message;\n}\n","import { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ACService {\n\n    constructor(\n        private _http: HttpClient\n    ) { }\n\n    search(word: string, url: string): Observable<any>{\n        let _url = new URL(url);\n        _url.searchParams.append('ac-reg', word);\n        return this._http.get(_url.toString());\n    }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  AfterViewInit,\n  Output,\n  ViewChild,\n  forwardRef, ViewChildren, QueryList\n} from '@angular/core';\nimport {ACService} from './slarn-autocomplete.service';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {ACTranslator, dynamic_translation, translator} from \"./translation\";\n\n@Component({\n  selector: 'slarn-autocomplete',\n  templateUrl: './slarn-autocomplete.component.html',\n  styleUrls: ['./slarn-autocomplete.component.css'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SlarnAutocompleteComponent),\n    multi: true\n  }],\n  // encapsulation: ViewEncapsulation.Emulated,\n})\nexport class SlarnAutocompleteComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n  private _templateVariables: RegExpMatchArray;\n  private _selectedId: number | string | Array<number | string>;\n  _selectedItem: any | Array<SelectedItem>;\n\n  /**\n   * list contains code of keys that will trigger the search function\n   * and the keys that represent navigation action\n   * @link https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes\n   */\n  private _keys = {\n    searchTriggerKeys: [46, 222, 8, 32],\n    navigationKeys: [38, 40, 13]// up, down, enter\n  };\n  private propagateChange: any = null;\n  private typingTimer = null;\n  private doneTypingInterval = 250;\n  private _selectedIndexFromNavigation: number = -1;\n  // private _isLocalConfig: boolean;\n\n  displaySuggestions: boolean = false;\n  loadingData: boolean = false;\n  filteredItems: Array<any> = [];\n  groups: Array<string> = null;\n  filteredGroupedItems: any;\n  translator = translator;\n\n  @ViewChild('autocompleteInput') autocompleteInput: ElementRef;\n  @ViewChild('displayAllBtn') displayAllBtn: ElementRef;\n  @ViewChild('container') container: ElementRef;\n  @ViewChild('spanX') spanX: ElementRef;\n  @ViewChildren('acsuggestion') suggestions: QueryList<SlarnAutocompleteSuggestionComponent>;\n\n  @Input('configuration') configuration: any;\n  @Input('disabled') disabled: boolean;\n  @Input('unselectable') unselectable: Array<string | number> = [];\n  @Output('onItemSelected') onItemSelected: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _service: ACService) {\n    // require('style-loader!./../../themes/default.css');\n  }\n\n  @Input()\n  set selectedId(value: number | string | Array<number | string>) {\n    this.filterSelectedValue(value);\n    this.searchAndSelectItemFromKey();\n  }\n\n  /**\n   * Filter given value and make sure that the autocomplete gets the correct data\n   * to work as expected\n   * @param value\n   */\n  private filterSelectedValue(value) {\n    this._selectedId = value;\n    // after setting key value we search for the related item\n    if (this.configuration.multiple && !Array.isArray(value)) {\n      // console.log('multiple autocomplete and value not an array, converting _selectedId to array and push the value');\n      this._selectedId = [];\n      this._selectedId.push(value);\n    }\n\n    if (!this.configuration.multiple && Array.isArray(value))\n      throw new Error(this.translator.dictionary.errors.passingArrayValueWithNoMultipleOption[this.configuration.language]);\n\n    if ((Array.isArray(value) && this.arrayHasObject(value))\n      || (!Array.isArray(value) && typeof value === 'object'))\n      throw new Error(this.translator.dictionary.errors.unknownType[this.configuration.language]);\n  }\n\n  /**\n   * Check array contain one or many objects\n   * @param value\n   */\n  private arrayHasObject(value: Array<any>) {\n    let hasObject = false;\n    value.forEach(e => {\n      if (typeof e === 'object') hasObject = true;\n    });\n    return hasObject;\n  }\n\n  /**\n   * Return the selected key(s)\n   */\n  get selectedId(): number | string | Array<number | string> {\n    return this._selectedId;\n  }\n\n  /**\n   * Return the selected item(s)\n   */\n  get selectedData(): any {\n    return (Array.isArray(this._selectedItem)) ? this.extractSelectedItems() : this._selectedItem;\n  }\n\n  ngOnInit() {\n    this.initConfiguration();\n  }\n\n  ngAfterViewInit() {\n    this.extractTemplateVariables();\n\n    // I called this listener in ngAfterViewInit because I don't want the listener\n    // to be set one time\n    // ngOnInit is fired after ngOnChanges which is called after any change in the view\n    if(!this.disabled) document.addEventListener('click', this.checkIfClickedInside, true);\n  }\n\n  /**\n   * Listener to check if user clicked outside of the autocomplete\n   * If he did then we should hide the suggestion list\n   * So we make sure that the autocomplete acts like any other list\n   */\n  checkIfClickedInside = (event: Event) => {\n    let isClickInside = this.container.nativeElement.contains(event.target);\n    if (!isClickInside) this.displaySuggestions = false;\n    else this.autocompleteInput.nativeElement.focus();\n  };\n\n  /**\n   * Clear autocomplete selection\n   */\n  clearAutocomplete() {\n    this.autocompleteInput.nativeElement.value = '';\n    this._selectedItem = null;\n    this._selectedId = null;\n    this.filteredItems = [];\n  }\n\n  /**\n   * Hide or display suggestions list\n   */\n  toggleDisplaySuggestions() {\n    if (!this.displaySuggestions) {\n      this.openSuggestions();\n    } else {\n      this.closeSuggestions();\n    }\n  }\n\n  /**\n   * Init default configuration\n   */\n  private initConfiguration() {\n    if (!this.configuration.rtl) this.configuration.rtl = false;\n    this.prepareUsedLanguage();\n    if (!this.configuration.multiple) this.configuration.multiple = false;\n    if (!this.configuration.template) this.configuration.template = '<div>#' + this.configuration.value + '#</div>';\n    if (!(<ACRemoteConfiguration> this.configuration).minCharacters) (<ACRemoteConfiguration> this.configuration).minCharacters = 1;\n    if (!(<ACRemoteConfiguration> this.configuration).loadingView)\n      (<ACRemoteConfiguration> this.configuration).loadingView = translator.dictionary.loadingText[this.configuration.language];\n  }\n\n  private prepareUsedLanguage(){\n    if(!this.configuration.language) this.configuration.language = ACTranslator.EN;\n    if(this.configuration.language && translator.availableLanguages.indexOf(this.configuration.language) == -1){\n      let translation = dynamic_translation(\n        this.translator.dictionary.errors.unknownLanguage[ACTranslator.EN],\n        [this.configuration.language, JSON.stringify(translator.availableLanguages)]\n      );\n      throw new Error(translation);\n    }\n\n  }\n\n  /**\n   * Search and select item by key value\n   */\n  private searchAndSelectItemFromKey() {\n    if ((<ACLocalConfiguration> this.configuration).data) {// if it's local configuration\n\n      this.selectItemFromData((<ACLocalConfiguration> this.configuration).data);\n\n    } else if ((<ACRemoteConfiguration> this.configuration).url) {// if it's remote configuration\n\n      this.searchRemotely('', (<ACRemoteConfiguration> this.configuration).url, true);\n\n    }\n  }\n\n  /**\n   * Search and select item from data by the value of the key\n   * @param data: any[]\n   */\n  private selectItemFromData(data: Array<any>) {\n\n    if (this.configuration.multiple) {\n      this._selectedItem = [];\n      let counter = 0;\n      data.forEach(item => {\n        if ((<Array<number | string>> this._selectedId).includes(item[this.configuration.key])) {\n          let si: SelectedItem = {elem: item, indexInFilteredItems: counter};\n          this._selectedItem.push(si);\n        }\n        counter++;\n      });\n    } else {\n      this._selectedItem = null;\n      data.forEach(item => {\n        if (item[this.configuration.key] == this._selectedId) {\n          this._selectedItem = item;\n          this.autocompleteInput.nativeElement.value = this._selectedItem[this.configuration.value];\n        }\n      });\n    }\n    // make sure to dispatch data after selection\n    this.dispatchData();\n  }\n\n  /**\n   * Extract available keys from template\n   * will be used to dislay data in the suggestions panel\n   */\n  private extractTemplateVariables() {\n    // Regex to find the words between to #\n    // may contain numbers and dots\n    const regx = /\\#(?:[a-zA-Z0-9_\\.]+)\\#/g;\n\n    // get matched result\n    this._templateVariables = this.configuration.template.match(regx);\n  }\n\n  /**\n   * fired each time a user press a key\n   * @param $event\n   */\n  onKeyup($event) {\n\n    if (this.fireSearchKey($event)) {\n      const reg = $event.target.value;\n      if (reg == '') {\n        this.displaySuggestions = false;\n        if (!this.configuration.multiple) {\n\n          this.clearAutocomplete();\n          this.dispatchData();\n        }\n      } else {\n\n        if ((<ACLocalConfiguration> this.configuration).data) {// if it's local configuration\n          this.displaySuggestions = true;\n          this.searchLocally(reg, (<ACLocalConfiguration> this.configuration).data);\n\n        } else if ((<ACRemoteConfiguration> this.configuration).url) {// if it's remote configuration\n          // when working remotely and for better user experience\n          // the searchRemotely function will be fired when user finish typing\n          // and we assume that finishing typing means not pressing key for like 250ms\n          if((<ACRemoteConfiguration> this.configuration).minCharacters <= reg.length){// make sure to call api after typing the need number of characters\n            this.displaySuggestions = true;\n            this.loadingData = true;\n            this.filteredItems = [];\n            if (this.typingTimer != null) clearTimeout(this.typingTimer);\n            this.typingTimer = setTimeout(() => {\n              this.searchRemotely(reg, (<ACRemoteConfiguration> this.configuration).url);\n            }, this.doneTypingInterval);\n          }\n        }\n      }\n    } else if (this.navigationKey($event)) {\n      $event.preventDefault();\n      this.navigate($event.which);\n    }\n  }\n\n  private navigate(key){\n    this.clearAllSelections();\n    switch(key){\n      case 38:// up key pressed\n        if(this._selectedIndexFromNavigation > 0) this._selectedIndexFromNavigation--;\n        this.enableSelectionForSelectedSuggestion(this._selectedIndexFromNavigation);\n        break;\n      case 40:// down key pressed\n        if(this._selectedIndexFromNavigation < this.filteredItems.length - 1) this._selectedIndexFromNavigation++;\n        this.enableSelectionForSelectedSuggestion(this._selectedIndexFromNavigation);\n        break;\n      case 13:// enter key pressed\n        let item: any = (this.configuration.group == null) ?\n          this.filteredItems[this._selectedIndexFromNavigation] :\n          // in case of using group _selectedIndexFromNavigation does not map with the correct index of filteredItems\n          // that's why we do an extra work to get the correct item from the available index\n          this.getItemFromGroup(this._selectedIndexFromNavigation);\n\n        this.performSelection(item);\n        break;\n    }\n  }\n\n  /**\n   * Get the right selected item when pressing enter key\n   * @param i\n   * @returns right item\n   */\n  private getItemFromGroup(i: number){\n    let counter = 0;\n    let selectedItem = null;\n    console.log('groups', this.groups);\n    for(let grp of this.groups){\n      console.log('grp', grp);\n      let _a: Array<any> = this.filteredGroupedItems[grp];\n      for(let item of _a){\n        if(i == counter) selectedItem = item;\n        counter++;\n      }\n    }\n    return selectedItem;\n  }\n\n  private enableSelectionForSelectedSuggestion(index: number){\n    let sg: SlarnAutocompleteSuggestionComponent = this.suggestions.find((e, i, array) => {\n      return (i == index);\n    });\n    sg.focusSuggestion = true;\n  }\n\n  /**\n   *\n   */\n  private clearAllSelections(){\n    this.suggestions.forEach((sg: SlarnAutocompleteSuggestionComponent, index: number, array) => {\n        sg.focusSuggestion = false;\n    });\n  }\n\n  /**\n   * Delete item from selected list and dispatch changes\n   * @param indexInSelectedItems\n   * @param si\n   */\n  deleteFromSelectedItems(indexInSelectedItems: number, si: SelectedItem) {\n    this._selectedItem.splice(indexInSelectedItems, 1);\n    this.filteredItems.splice(si.indexInFilteredItems, 0, si.elem);\n    this.buildGroupsIfNeeded();\n    (<Array<number | string>> this._selectedId).splice(indexInSelectedItems, 1);\n\n    if (this._selectedItem.length == 0) {\n      this._selectedItem = null;\n      this._selectedId = null;\n    }\n\n    this.dispatchData();\n  }\n\n  /**\n   * After key down clear used timer to calculate\n   * when user finished typing\n   */\n  onKeyDown($event) {\n    if (this.typingTimer != null) clearTimeout(this.typingTimer);\n  }\n\n  /**\n   * Check if this an alphabet or number key\n   * @param $event keyup event\n   * @return fireKeySearch\n   */\n  private fireSearchKey($event): boolean {\n    return (\n      ($event.which <= 105 && $event.which >= 48) ||\n      (this._keys.searchTriggerKeys.indexOf($event.which) > -1)\n    );\n  }\n\n  /**\n   * Check if pressed key is a navigation key\n   * @param $event\n   * @returns\n   */\n  private navigationKey($event): boolean {\n    return (this._keys.navigationKeys.indexOf($event.which) > -1)\n  }\n\n  /**\n   * If it's a local configuration then we will search inside the configuration.data object\n   * @param word word to search\n   * @param data filtered data\n   */\n  private searchLocally(word: string, data: Array<any>) {\n    this.filteredItems = [];\n    data.forEach((item) => {\n      let _str = JSON.stringify(item);\n      if (\n        _str.toLowerCase().indexOf(word.toLowerCase()) != -1 // if word exist in item\n        && !this.existInSelectedItems(item) // and does not exist in selected items\n      ) this.filteredItems.push(item);// then add it to filteredItems to be displayed in suggestions list\n\n      this.buildGroupsIfNeeded();\n    });\n  }\n\n  /**\n   * Check if given item exist in _selectedItem array ot not\n   * @param item\n   */\n  private existInSelectedItems(item: any): boolean {\n    let exist: boolean;\n    if (!Array.isArray(this._selectedItem)) {\n      exist = false;\n    } else {\n      exist = (this._selectedItem.find(si =>\n        si.elem[this.configuration.key] === item[this.configuration.key]\n      ) != undefined);\n    }\n    return exist;\n  }\n\n  /**\n   * If it's a remote configuration then we get the word and add it to the url\n   * before sending the request to the api\n   * @param word word to search\n   * @param url api url\n   * @param selectItemAfterSearch\n   */\n  private searchRemotely(word: string, url: string, selectItemAfterSearch?: boolean) {\n    this.loadingData = true;\n    this.filteredItems = [];\n    this._service.search(word, url).subscribe(res => {\n      // only push items who are not in _selectedItems list\n      res.forEach((item) => {\n        if (!this.existInSelectedItems(item)) this.filteredItems.push(item);\n      });\n      if (selectItemAfterSearch) this.selectItemFromData(this.filteredItems);\n      this.buildGroupsIfNeeded();\n      this.loadingData = false;\n    });\n  }\n\n  /**\n   * If grouping is requested by the user then we need to prepare it\n   */\n  private buildGroupsIfNeeded(){\n    if(this.configuration.group != null){\n      // console.log('before grouping', this.filteredItems);\n      this.groups = [];\n      this.filteredGroupedItems = {};\n\n      let groupedData = this.group(this.filteredItems, this.configuration.group.field);\n      let self = this;\n      Object.keys(groupedData).sort().forEach(function(key) {\n        self.filteredGroupedItems[key] = groupedData[key];\n      });\n      this.groups = Object.keys(this.filteredGroupedItems);\n      // console.log('filteredGroupedItems', this.filteredGroupedItems);\n      // console.log('groups', this.groups);\n    }\n  }\n\n  /**\n   * Pares array of items and return grouped object by the given field\n   * @param list\n   * @param keyGetter\n   * @returns Grouped object\n   */\n  private group(list, keyGetter) {\n    if(typeof keyGetter === 'undefined')\n      throw new Error(this.translator.dictionary.errors.unknownFieldForGroupOption[this.configuration.language]);\n    const map = {};\n    list.forEach((item) => {\n      const key = keyGetter(item);\n      if (!(key in map)) map[key] = [];\n      map[key].push(item);\n    });\n    return map;\n  }\n\n  /**\n   * Build view with data based on the given template\n   * @param object\n   * @return string built view\n   */\n  buildSuggestionView(object: any): string {\n    // console.log('object.toString()', object.toString());\n    let view: string = this.configuration.template;\n    this._templateVariables.forEach((res: string) => {\n      let key = res.replace(/\\#/g, '');// remove # from the string\n      let value: string = this.extractValue(key, object);\n      view = view.replace(res, value);// replace words with object value\n    });\n    return view;\n  }\n\n  /**\n   * Build the view of the group based on giving template\n   * @param group\n   * @returns\n   */\n  buildGroupView(group: string){\n    let template: string;\n    if(!this.configuration.group.template || this.configuration.group.template == '')\n      template = '<div style=\"background: #a7a3a3;padding: 5px;font-weight: bold;color: #fff;\">#__group__#</div>';\n    else\n      template = this.configuration.group.template;\n    return template.replace('#__group__#', group);\n  }\n  \n  /**\n   * Check if item is listed as unselectable item\n   * by checking if it exist in this.unselectable array\n   * \n   * @param item\n   */\n  isItemUnselectable(item: any){\n    return (this.unselectable.includes(item[this.configuration.key]));\n  }\n\n  /**\n   * Extract the correct value from the multidimensional object\n   * @param keysString: string with keys separated by dots\n   * @param object\n   * @returns correct value\n   */\n  private extractValue(keysString: string, object: any): string {\n    let result: string = null;\n    let keys: Array<string> = keysString.split('.');\n    let size = keys.length;\n    let counter = 1;\n    let _currentObject = object;\n\n    keys.forEach(key => {\n      if (!(key in _currentObject)){\n        let translation = dynamic_translation(\n          this.translator.dictionary.errors.unknownKeyValue[this.configuration.language],\n          [key, JSON.stringify(_currentObject)]\n        );\n        throw new Error(translation);\n      }\n\n      if (counter < size) {\n        _currentObject = _currentObject[key];\n      } else {\n        result = _currentObject[key];\n      }\n      counter++;\n    });\n    return result;\n  }\n\n  /**\n   * Triggered after a user select a suggestion\n   * @param item selected item from the list\n   */\n  performSelection(item: any) {\n    // console.log('selected item', item);\n    if (this.configuration.multiple) {\n\n      let index = this.filteredItems.findIndex(e => e[this.configuration.key] == item[this.configuration.key]);\n      // console.log('index', index);\n      if (this._selectedItem == null) this._selectedItem = [];\n      let o: SelectedItem = {elem: item, indexInFilteredItems: index};\n      console.log('o', o);\n      this._selectedItem.push(o);\n      this.filteredItems.splice(index, 1);\n      if (this.filteredItems.length == 0) this.displaySuggestions = false;// if filteredItems list is empty then hide suggestions list\n      this.buildGroupsIfNeeded();\n\n      if (this._selectedId == null) this._selectedId = [];\n      (<Array<number | string>> this._selectedId).push(item[this.configuration.key]);\n      this.autocompleteInput.nativeElement.value = '';\n    } else {\n      this._selectedItem = item;\n      this._selectedId = item[this.configuration.key];\n      this.autocompleteInput.nativeElement.value = this._selectedItem[this.configuration.value];\n      this.displaySuggestions = false;\n    }\n    this._selectedIndexFromNavigation = -1;\n    this.dispatchData();\n  }\n\n  /**\n   * Dispatch data to external components\n   */\n  private dispatchData() {\n    // emit the whole object when item selected\n    if (Array.isArray(this._selectedItem))\n      this.onItemSelected.emit(this.extractSelectedItems());\n    else\n      this.onItemSelected.emit(this._selectedItem);\n\n    // propagate only the key to the form\n    // console.log('propagation _selectedId: ' + this._selectedId);\n    if (this.propagateChange != null) this.propagateChange(this._selectedId);\n  }\n\n  /**\n   * Extract items from _selectedItems\n   */\n  private extractSelectedItems() {\n    let items = [];\n    (<Array<SelectedItem>> this._selectedItem).forEach(si => {\n      items.push(si.elem);\n    });\n    return items;\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) { }\n\n  writeValue(value) {\n    // after setting key value we search for the related item\n\n    if (value != '' && value != null && value != undefined) {\n      this.filterSelectedValue(value);\n      this.searchAndSelectItemFromKey();\n    }else{\n      this.clearAutocomplete();\n      this.dispatchData();\n    }\n  }\n\n  //======================================================================\n  //        FUNCTIONS FOR EXTERNAL USAGE\n  //======================================================================\n  /**\n   * Open suggestions list\n   */\n  openSuggestions(){\n    if(this.disabled) return;\n    \n    if(!this.displaySuggestions){\n      this.displaySuggestions = true;\n      if ((<ACLocalConfiguration> this.configuration).data) {// if it's local configuration\n\n        this.searchLocally('', (<ACLocalConfiguration> this.configuration).data);\n\n      } else if ((<ACRemoteConfiguration> this.configuration).url) {// if it's remote configuration\n\n        this.searchRemotely('', (<ACRemoteConfiguration> this.configuration).url);\n\n      }\n    }\n  }\n\n  /**\n   * Close suggestions list\n   */\n  closeSuggestions(){\n    this.displaySuggestions = false;\n  }\n\n  /**\n   * Add new item to data\n   * If there is another item with the same \"key\" value then the it will not be added\n   * @param item\n   * @param selectIt boolean: select the item after adding if true (false by default)\n   */\n  appendItem(item: any, selectIt: boolean){\n    if ((<ACLocalConfiguration> this.configuration).data) {\n      selectIt = (typeof selectIt === 'undefined') ? false : selectIt;\n      let i =this.findItem((<ACLocalConfiguration> this.configuration).data, item);\n      if(i == undefined){\n        (<ACLocalConfiguration> this.configuration).data.push(item);\n        if(selectIt) this.performSelection(item);\n      }else{\n        let translation = dynamic_translation(\n          this.translator.dictionary.errors.duplicateItemDetected[this.configuration.language],\n          [JSON.stringify(i), JSON.stringify(item)]\n        );\n        throw new Error(translation);\n      }\n\n    }else{\n      throw new Error(this.translator.dictionary.errors.appendItemWorkOnlyLocally[this.configuration.language]);\n    }\n  }\n\n  /**\n   * Find if item already exist in data\n   * @param data\n   * @param item\n   * @returns\n   */\n  private findItem(data: Array<any>, item: any){\n    return data.find(elem => {\n      return (elem[this.configuration.key] == item[this.configuration.key]);\n    });\n  }\n}\n\n\n/**\n * Suggestion component for Autocomplete\n */\n@Component({\n  selector: 'slarn-ac-suggestion',\n  template: `\n    <div [class.unselectable]=\"unselectable\" class=\"sg\" (click)=\"selectItem()\" [focused]=\"focusSuggestion\">\n      <div *ngIf=\"unselectable\" class=\"suggestion-curtain\"></div>\n      <div class=\"content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .sg {\n      cursor: default;\n      position: relative;\n    }\n\n    .sg .content{\n      padding: 5px;\n    }\n\n    .sg .suggestion-curtain{\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background: #ffffffa3;\n      cursor: not-allowed;\n    }\n\n    .sg:not(.unselectable):hover {\n      background: #ececec;\n    }\n\n  `],\n})\nexport class SlarnAutocompleteSuggestionComponent implements OnInit {\n  @Input('item') item: any;\n  @Input('unselectable') unselectable: boolean = false;\n  @Output('onSuggestionClicked') onSuggestionClicked: EventEmitter<any> = new EventEmitter();\n  focusSuggestion: boolean = false;\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  selectItem() {\n    if(!this.unselectable) this.onSuggestionClicked.emit(this.item);\n    else console.log('this item is unselectable', this.item);\n  }\n}\n\n/**\n * AutoComplete configuration\n */\nexport interface Configuration {\n  /**\n   * key will be stored in the input\n   * must be the unique value of the object (ex: id)\n   * will be used to search item and when sending form\n   */\n  key: string;\n\n  /**\n   * value will be displayed to the user in the input\n   */\n  value: string;\n\n  /**\n   * template that will be displayed in the suggestions list\n   * if this attribute is not defined then the autocomplete will\n   * use the default template and display only the value\n   */\n  template?: string;\n\n  /**\n   * The language that will be used to display default texts and errors\n   */\n  language?: string;\n\n  /**\n   * RTL Support (false by default)\n   */\n  rtl?: boolean;\n\n  /**\n   * name will be giving to the input\n   */\n  name?: string\n\n  /**\n   * allow multiple selection (default: false)\n   */\n  multiple?: boolean;\n\n  /**\n   * allow to group items by a specific field\n   */\n  group?: Group;\n}\n\n/**\n * Remote configuration used when you want to work remotely with an api\n */\nexport interface ACRemoteConfiguration extends Configuration {\n  /**\n   * URL to the API\n   */\n  url: string;\n\n  /**\n   * number of characters needed before calling api\n   */\n  minCharacters?: number;\n\n  /**\n   * text or html will be rendered when loading data remotely\n   */\n  loadingView?: string;\n}\n\n/**\n * Local configuration: used if you want to pass data explicitly to the AutoComplete\n */\nexport interface ACLocalConfiguration extends Configuration {\n  data: Array<any>;\n}\n\n/**\n * Group items\n */\nexport interface Group{\n  /**\n   * Arrow function to specify the group field\n   * Used arrow function instead of a simple field cuz the group field can be a field of another complex object\n   */\n  field: any;\n\n  /**\n   * Block that will be rendered for the group\n   */\n  template?: string;\n}\n\n/**\n * We will use this object to store selected items\n */\nexport interface SelectedItem {\n  elem: any;// selected object\n  indexInFilteredItems: number;// keep track of it's index in filteredItems so we can return it to it's exact place\n}\n","\nimport {Directive, ElementRef, HostListener, Input} from \"@angular/core\";\n\n@Directive({\n  selector: '[autoGrow]',\n\n})\nexport class AutoGrowDirective{\n  @Input('activated') activated: boolean = true;\n  constructor(private elem: ElementRef){}\n\n  @HostListener('keyup')\n  @HostListener('keydown')\n  @HostListener('keypress ')\n  autoGrow(){\n    if(this.activated){\n      let input = this.elem.nativeElement;\n      this.fireAutoGrow(input);\n    }\n  }\n\n  private fireAutoGrow(input){\n    let pad_right = 5;\n    let tmp = document.createElement('div');\n    tmp.style.padding = '0';\n    if(getComputedStyle)\n      tmp.style.cssText = getComputedStyle(input, null).cssText;\n    if(input.currentStyle)\n      tmp.style.cssText = input.currentStyle.cssText;\n    tmp.style.width = '';\n    tmp.style.position = 'absolute';\n\n    tmp.innerHTML = input.value\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\")\n      .replace(/ /g, '&nbsp;')\n    ;\n\n    input.parentNode.appendChild(tmp);\n    let width = tmp.clientWidth+pad_right+1;\n    tmp.parentNode.removeChild(tmp);\n    input.style.width = width+'px';\n  }\n}\n","import {Directive, Input, Renderer2, ElementRef} from '@angular/core';\n\n@Directive({\n  selector: '[focused]'\n})\nexport class FocusedDirective {\n  @Input()\n  set focused(value: boolean){\n    if(value){\n      //this.renderer.invokeElementMethod(this.elementRef.nativeElement, 'scrollIntoViewIfNeeded');\n      this.renderer.selectRootElement(this.elementRef.nativeElement).scrollIntoView();\n      this.elementRef.nativeElement.style.background = '#ececec';\n    }else{\n      this.elementRef.nativeElement.style.background = null;\n    }\n  }\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2){}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {DomSanitizer, SafeHtml} from \"@angular/platform-browser\";\n\n@Pipe({\n  name: 'renderSafely'\n})\nexport class RenderSafelyPipe implements PipeTransform  {\n  constructor(private sanitized: DomSanitizer) {}\n  transform(value: string): SafeHtml {\n    return this.sanitized.bypassSecurityTrustHtml(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SlarnAutocompleteComponent, SlarnAutocompleteSuggestionComponent } from './autocomplete/slarn-autocomplete.component';\nimport { ACService } from './autocomplete/slarn-autocomplete.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport {AutoGrowDirective} from \"./autocomplete/auto-grow.directive\";\nimport {FocusedDirective} from \"./autocomplete/focus.directive\";\nimport {RenderSafelyPipe} from \"./autocomplete/render-safely.pipe\";\n\n@NgModule({\n  imports: [\n    CommonModule, HttpClientModule\n  ],\n  declarations: [\n    SlarnAutocompleteComponent, SlarnAutocompleteSuggestionComponent, AutoGrowDirective, FocusedDirective, RenderSafelyPipe\n  ],\n  providers: [ACService],\n  exports: [\n    SlarnAutocompleteComponent\n  ]\n})\nexport class SlarnAutocompleteModule { }\n"]}